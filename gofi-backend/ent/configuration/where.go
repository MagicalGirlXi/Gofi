// Code generated by entc, DO NOT EDIT.

package configuration

import (
	"gofi/ent/predicate"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Configuration {
	return predicate.Configuration(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	},
	)
}

// AppPath applies equality check predicate on the "appPath" field. It's identical to AppPathEQ.
func AppPath(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppPath), v))
	},
	)
}

// DefStoragePath applies equality check predicate on the "defStoragePath" field. It's identical to DefStoragePathEQ.
func DefStoragePath(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefStoragePath), v))
	},
	)
}

// ThemeStyle applies equality check predicate on the "themeStyle" field. It's identical to ThemeStyleEQ.
func ThemeStyle(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeColor applies equality check predicate on the "themeColor" field. It's identical to ThemeColorEQ.
func ThemeColor(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeColor), v))
	},
	)
}

// NavMode applies equality check predicate on the "navMode" field. It's identical to NavModeEQ.
func NavMode(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNavMode), v))
	},
	)
}

// DatabaseFilePath applies equality check predicate on the "databaseFilePath" field. It's identical to DatabaseFilePathEQ.
func DatabaseFilePath(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// CustomStoragePath applies equality check predicate on the "customStoragePath" field. It's identical to CustomStoragePathEQ.
func CustomStoragePath(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomStoragePath), v))
	},
	)
}

// LogDirectoryPath applies equality check predicate on the "logDirectoryPath" field. It's identical to LogDirectoryPathEQ.
func LogDirectoryPath(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// Initialized applies equality check predicate on the "initialized" field. It's identical to InitializedEQ.
func Initialized(v bool) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialized), v))
	},
	)
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	},
	)
}

// Updated applies equality check predicate on the "updated" field. It's identical to UpdatedEQ.
func Updated(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdated), v))
	},
	)
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	},
	)
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	},
	)
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	},
	)
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	},
	)
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	},
	)
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	},
	)
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	},
	)
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	},
	)
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersion), v))
	},
	)
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersion), v))
	},
	)
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersion), v))
	},
	)
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	},
	)
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	},
	)
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersion), v))
	},
	)
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersion), v))
	},
	)
}

// AppPathEQ applies the EQ predicate on the "appPath" field.
func AppPathEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppPath), v))
	},
	)
}

// AppPathNEQ applies the NEQ predicate on the "appPath" field.
func AppPathNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppPath), v))
	},
	)
}

// AppPathIn applies the In predicate on the "appPath" field.
func AppPathIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppPath), v...))
	},
	)
}

// AppPathNotIn applies the NotIn predicate on the "appPath" field.
func AppPathNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppPath), v...))
	},
	)
}

// AppPathGT applies the GT predicate on the "appPath" field.
func AppPathGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppPath), v))
	},
	)
}

// AppPathGTE applies the GTE predicate on the "appPath" field.
func AppPathGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppPath), v))
	},
	)
}

// AppPathLT applies the LT predicate on the "appPath" field.
func AppPathLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppPath), v))
	},
	)
}

// AppPathLTE applies the LTE predicate on the "appPath" field.
func AppPathLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppPath), v))
	},
	)
}

// AppPathContains applies the Contains predicate on the "appPath" field.
func AppPathContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppPath), v))
	},
	)
}

// AppPathHasPrefix applies the HasPrefix predicate on the "appPath" field.
func AppPathHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppPath), v))
	},
	)
}

// AppPathHasSuffix applies the HasSuffix predicate on the "appPath" field.
func AppPathHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppPath), v))
	},
	)
}

// AppPathIsNil applies the IsNil predicate on the "appPath" field.
func AppPathIsNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppPath)))
	},
	)
}

// AppPathNotNil applies the NotNil predicate on the "appPath" field.
func AppPathNotNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppPath)))
	},
	)
}

// AppPathEqualFold applies the EqualFold predicate on the "appPath" field.
func AppPathEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppPath), v))
	},
	)
}

// AppPathContainsFold applies the ContainsFold predicate on the "appPath" field.
func AppPathContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppPath), v))
	},
	)
}

// DefStoragePathEQ applies the EQ predicate on the "defStoragePath" field.
func DefStoragePathEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathNEQ applies the NEQ predicate on the "defStoragePath" field.
func DefStoragePathNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathIn applies the In predicate on the "defStoragePath" field.
func DefStoragePathIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefStoragePath), v...))
	},
	)
}

// DefStoragePathNotIn applies the NotIn predicate on the "defStoragePath" field.
func DefStoragePathNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefStoragePath), v...))
	},
	)
}

// DefStoragePathGT applies the GT predicate on the "defStoragePath" field.
func DefStoragePathGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathGTE applies the GTE predicate on the "defStoragePath" field.
func DefStoragePathGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathLT applies the LT predicate on the "defStoragePath" field.
func DefStoragePathLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathLTE applies the LTE predicate on the "defStoragePath" field.
func DefStoragePathLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathContains applies the Contains predicate on the "defStoragePath" field.
func DefStoragePathContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathHasPrefix applies the HasPrefix predicate on the "defStoragePath" field.
func DefStoragePathHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathHasSuffix applies the HasSuffix predicate on the "defStoragePath" field.
func DefStoragePathHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathIsNil applies the IsNil predicate on the "defStoragePath" field.
func DefStoragePathIsNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefStoragePath)))
	},
	)
}

// DefStoragePathNotNil applies the NotNil predicate on the "defStoragePath" field.
func DefStoragePathNotNil() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefStoragePath)))
	},
	)
}

// DefStoragePathEqualFold applies the EqualFold predicate on the "defStoragePath" field.
func DefStoragePathEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefStoragePath), v))
	},
	)
}

// DefStoragePathContainsFold applies the ContainsFold predicate on the "defStoragePath" field.
func DefStoragePathContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefStoragePath), v))
	},
	)
}

// ThemeStyleEQ applies the EQ predicate on the "themeStyle" field.
func ThemeStyleEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleNEQ applies the NEQ predicate on the "themeStyle" field.
func ThemeStyleNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleIn applies the In predicate on the "themeStyle" field.
func ThemeStyleIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeStyle), v...))
	},
	)
}

// ThemeStyleNotIn applies the NotIn predicate on the "themeStyle" field.
func ThemeStyleNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeStyle), v...))
	},
	)
}

// ThemeStyleGT applies the GT predicate on the "themeStyle" field.
func ThemeStyleGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleGTE applies the GTE predicate on the "themeStyle" field.
func ThemeStyleGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleLT applies the LT predicate on the "themeStyle" field.
func ThemeStyleLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleLTE applies the LTE predicate on the "themeStyle" field.
func ThemeStyleLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleContains applies the Contains predicate on the "themeStyle" field.
func ThemeStyleContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleHasPrefix applies the HasPrefix predicate on the "themeStyle" field.
func ThemeStyleHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleHasSuffix applies the HasSuffix predicate on the "themeStyle" field.
func ThemeStyleHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleEqualFold applies the EqualFold predicate on the "themeStyle" field.
func ThemeStyleEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeStyleContainsFold applies the ContainsFold predicate on the "themeStyle" field.
func ThemeStyleContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThemeStyle), v))
	},
	)
}

// ThemeColorEQ applies the EQ predicate on the "themeColor" field.
func ThemeColorEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorNEQ applies the NEQ predicate on the "themeColor" field.
func ThemeColorNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorIn applies the In predicate on the "themeColor" field.
func ThemeColorIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeColor), v...))
	},
	)
}

// ThemeColorNotIn applies the NotIn predicate on the "themeColor" field.
func ThemeColorNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeColor), v...))
	},
	)
}

// ThemeColorGT applies the GT predicate on the "themeColor" field.
func ThemeColorGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorGTE applies the GTE predicate on the "themeColor" field.
func ThemeColorGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorLT applies the LT predicate on the "themeColor" field.
func ThemeColorLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorLTE applies the LTE predicate on the "themeColor" field.
func ThemeColorLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorContains applies the Contains predicate on the "themeColor" field.
func ThemeColorContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorHasPrefix applies the HasPrefix predicate on the "themeColor" field.
func ThemeColorHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorHasSuffix applies the HasSuffix predicate on the "themeColor" field.
func ThemeColorHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorEqualFold applies the EqualFold predicate on the "themeColor" field.
func ThemeColorEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThemeColor), v))
	},
	)
}

// ThemeColorContainsFold applies the ContainsFold predicate on the "themeColor" field.
func ThemeColorContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThemeColor), v))
	},
	)
}

// NavModeEQ applies the EQ predicate on the "navMode" field.
func NavModeEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNavMode), v))
	},
	)
}

// NavModeNEQ applies the NEQ predicate on the "navMode" field.
func NavModeNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNavMode), v))
	},
	)
}

// NavModeIn applies the In predicate on the "navMode" field.
func NavModeIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNavMode), v...))
	},
	)
}

// NavModeNotIn applies the NotIn predicate on the "navMode" field.
func NavModeNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNavMode), v...))
	},
	)
}

// NavModeGT applies the GT predicate on the "navMode" field.
func NavModeGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNavMode), v))
	},
	)
}

// NavModeGTE applies the GTE predicate on the "navMode" field.
func NavModeGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNavMode), v))
	},
	)
}

// NavModeLT applies the LT predicate on the "navMode" field.
func NavModeLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNavMode), v))
	},
	)
}

// NavModeLTE applies the LTE predicate on the "navMode" field.
func NavModeLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNavMode), v))
	},
	)
}

// NavModeContains applies the Contains predicate on the "navMode" field.
func NavModeContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNavMode), v))
	},
	)
}

// NavModeHasPrefix applies the HasPrefix predicate on the "navMode" field.
func NavModeHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNavMode), v))
	},
	)
}

// NavModeHasSuffix applies the HasSuffix predicate on the "navMode" field.
func NavModeHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNavMode), v))
	},
	)
}

// NavModeEqualFold applies the EqualFold predicate on the "navMode" field.
func NavModeEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNavMode), v))
	},
	)
}

// NavModeContainsFold applies the ContainsFold predicate on the "navMode" field.
func NavModeContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNavMode), v))
	},
	)
}

// DatabaseFilePathEQ applies the EQ predicate on the "databaseFilePath" field.
func DatabaseFilePathEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathNEQ applies the NEQ predicate on the "databaseFilePath" field.
func DatabaseFilePathNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathIn applies the In predicate on the "databaseFilePath" field.
func DatabaseFilePathIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDatabaseFilePath), v...))
	},
	)
}

// DatabaseFilePathNotIn applies the NotIn predicate on the "databaseFilePath" field.
func DatabaseFilePathNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDatabaseFilePath), v...))
	},
	)
}

// DatabaseFilePathGT applies the GT predicate on the "databaseFilePath" field.
func DatabaseFilePathGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathGTE applies the GTE predicate on the "databaseFilePath" field.
func DatabaseFilePathGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathLT applies the LT predicate on the "databaseFilePath" field.
func DatabaseFilePathLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathLTE applies the LTE predicate on the "databaseFilePath" field.
func DatabaseFilePathLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathContains applies the Contains predicate on the "databaseFilePath" field.
func DatabaseFilePathContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathHasPrefix applies the HasPrefix predicate on the "databaseFilePath" field.
func DatabaseFilePathHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathHasSuffix applies the HasSuffix predicate on the "databaseFilePath" field.
func DatabaseFilePathHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathEqualFold applies the EqualFold predicate on the "databaseFilePath" field.
func DatabaseFilePathEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// DatabaseFilePathContainsFold applies the ContainsFold predicate on the "databaseFilePath" field.
func DatabaseFilePathContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDatabaseFilePath), v))
	},
	)
}

// CustomStoragePathEQ applies the EQ predicate on the "customStoragePath" field.
func CustomStoragePathEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathNEQ applies the NEQ predicate on the "customStoragePath" field.
func CustomStoragePathNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathIn applies the In predicate on the "customStoragePath" field.
func CustomStoragePathIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomStoragePath), v...))
	},
	)
}

// CustomStoragePathNotIn applies the NotIn predicate on the "customStoragePath" field.
func CustomStoragePathNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomStoragePath), v...))
	},
	)
}

// CustomStoragePathGT applies the GT predicate on the "customStoragePath" field.
func CustomStoragePathGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathGTE applies the GTE predicate on the "customStoragePath" field.
func CustomStoragePathGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathLT applies the LT predicate on the "customStoragePath" field.
func CustomStoragePathLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathLTE applies the LTE predicate on the "customStoragePath" field.
func CustomStoragePathLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathContains applies the Contains predicate on the "customStoragePath" field.
func CustomStoragePathContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathHasPrefix applies the HasPrefix predicate on the "customStoragePath" field.
func CustomStoragePathHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathHasSuffix applies the HasSuffix predicate on the "customStoragePath" field.
func CustomStoragePathHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathEqualFold applies the EqualFold predicate on the "customStoragePath" field.
func CustomStoragePathEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomStoragePath), v))
	},
	)
}

// CustomStoragePathContainsFold applies the ContainsFold predicate on the "customStoragePath" field.
func CustomStoragePathContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomStoragePath), v))
	},
	)
}

// LogDirectoryPathEQ applies the EQ predicate on the "logDirectoryPath" field.
func LogDirectoryPathEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathNEQ applies the NEQ predicate on the "logDirectoryPath" field.
func LogDirectoryPathNEQ(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathIn applies the In predicate on the "logDirectoryPath" field.
func LogDirectoryPathIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogDirectoryPath), v...))
	},
	)
}

// LogDirectoryPathNotIn applies the NotIn predicate on the "logDirectoryPath" field.
func LogDirectoryPathNotIn(vs ...string) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogDirectoryPath), v...))
	},
	)
}

// LogDirectoryPathGT applies the GT predicate on the "logDirectoryPath" field.
func LogDirectoryPathGT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathGTE applies the GTE predicate on the "logDirectoryPath" field.
func LogDirectoryPathGTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathLT applies the LT predicate on the "logDirectoryPath" field.
func LogDirectoryPathLT(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathLTE applies the LTE predicate on the "logDirectoryPath" field.
func LogDirectoryPathLTE(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathContains applies the Contains predicate on the "logDirectoryPath" field.
func LogDirectoryPathContains(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathHasPrefix applies the HasPrefix predicate on the "logDirectoryPath" field.
func LogDirectoryPathHasPrefix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathHasSuffix applies the HasSuffix predicate on the "logDirectoryPath" field.
func LogDirectoryPathHasSuffix(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathEqualFold applies the EqualFold predicate on the "logDirectoryPath" field.
func LogDirectoryPathEqualFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// LogDirectoryPathContainsFold applies the ContainsFold predicate on the "logDirectoryPath" field.
func LogDirectoryPathContainsFold(v string) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogDirectoryPath), v))
	},
	)
}

// InitializedEQ applies the EQ predicate on the "initialized" field.
func InitializedEQ(v bool) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitialized), v))
	},
	)
}

// InitializedNEQ applies the NEQ predicate on the "initialized" field.
func InitializedNEQ(v bool) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInitialized), v))
	},
	)
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	},
	)
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	},
	)
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreated), v...))
	},
	)
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	},
	)
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	},
	)
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	},
	)
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	},
	)
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	},
	)
}

// UpdatedEQ applies the EQ predicate on the "updated" field.
func UpdatedEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdated), v))
	},
	)
}

// UpdatedNEQ applies the NEQ predicate on the "updated" field.
func UpdatedNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdated), v))
	},
	)
}

// UpdatedIn applies the In predicate on the "updated" field.
func UpdatedIn(vs ...time.Time) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdated), v...))
	},
	)
}

// UpdatedNotIn applies the NotIn predicate on the "updated" field.
func UpdatedNotIn(vs ...time.Time) predicate.Configuration {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Configuration(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdated), v...))
	},
	)
}

// UpdatedGT applies the GT predicate on the "updated" field.
func UpdatedGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdated), v))
	},
	)
}

// UpdatedGTE applies the GTE predicate on the "updated" field.
func UpdatedGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdated), v))
	},
	)
}

// UpdatedLT applies the LT predicate on the "updated" field.
func UpdatedLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdated), v))
	},
	)
}

// UpdatedLTE applies the LTE predicate on the "updated" field.
func UpdatedLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdated), v))
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
