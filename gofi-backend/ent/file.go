// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gofi/ent/file"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// IsDirectory holds the value of the "isDirectory" field.
	IsDirectory bool `json:"isDirectory"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Extension holds the value of the "extension" field.
	Extension string `json:"extension"`
	// Mime holds the value of the "mime" field.
	Mime string `json:"mime"`
	// Path holds the value of the "path" field.
	Path string `json:"path"`
	// LastModified holds the value of the "lastModified" field.
	LastModified int64 `json:"lastModified"`
	// Content holds the value of the "content" field.
	Content string `json:"content"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullBool{},   // isDirectory
		&sql.NullInt64{},  // size
		&sql.NullString{}, // extension
		&sql.NullString{}, // mime
		&sql.NullString{}, // path
		&sql.NullInt64{},  // lastModified
		&sql.NullString{}, // content
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(values ...interface{}) error {
	if m, n := len(values), len(file.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		f.Name = value.String
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field isDirectory", values[1])
	} else if value.Valid {
		f.IsDirectory = value.Bool
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field size", values[2])
	} else if value.Valid {
		f.Size = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field extension", values[3])
	} else if value.Valid {
		f.Extension = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field mime", values[4])
	} else if value.Valid {
		f.Mime = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field path", values[5])
	} else if value.Valid {
		f.Path = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field lastModified", values[6])
	} else if value.Valid {
		f.LastModified = value.Int64
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field content", values[7])
	} else if value.Valid {
		f.Content = value.String
	}
	return nil
}

// Update returns a builder for updating this File.
// Note that, you need to call File.Unwrap() before calling this method, if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return (&FileClient{f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", isDirectory=")
	builder.WriteString(fmt.Sprintf("%v", f.IsDirectory))
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", f.Size))
	builder.WriteString(", extension=")
	builder.WriteString(f.Extension)
	builder.WriteString(", mime=")
	builder.WriteString(f.Mime)
	builder.WriteString(", path=")
	builder.WriteString(f.Path)
	builder.WriteString(", lastModified=")
	builder.WriteString(fmt.Sprintf("%v", f.LastModified))
	builder.WriteString(", content=")
	builder.WriteString(f.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File

func (f Files) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
