// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gofi/ent/file"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	name         *string
	isDirectory  *bool
	size         *int
	extension    *string
	mime         *string
	path         *string
	lastModified *int64
	content      *string
}

// SetName sets the name field.
func (fc *FileCreate) SetName(s string) *FileCreate {
	fc.name = &s
	return fc
}

// SetIsDirectory sets the isDirectory field.
func (fc *FileCreate) SetIsDirectory(b bool) *FileCreate {
	fc.isDirectory = &b
	return fc
}

// SetNillableIsDirectory sets the isDirectory field if the given value is not nil.
func (fc *FileCreate) SetNillableIsDirectory(b *bool) *FileCreate {
	if b != nil {
		fc.SetIsDirectory(*b)
	}
	return fc
}

// SetSize sets the size field.
func (fc *FileCreate) SetSize(i int) *FileCreate {
	fc.size = &i
	return fc
}

// SetNillableSize sets the size field if the given value is not nil.
func (fc *FileCreate) SetNillableSize(i *int) *FileCreate {
	if i != nil {
		fc.SetSize(*i)
	}
	return fc
}

// SetExtension sets the extension field.
func (fc *FileCreate) SetExtension(s string) *FileCreate {
	fc.extension = &s
	return fc
}

// SetMime sets the mime field.
func (fc *FileCreate) SetMime(s string) *FileCreate {
	fc.mime = &s
	return fc
}

// SetPath sets the path field.
func (fc *FileCreate) SetPath(s string) *FileCreate {
	fc.path = &s
	return fc
}

// SetLastModified sets the lastModified field.
func (fc *FileCreate) SetLastModified(i int64) *FileCreate {
	fc.lastModified = &i
	return fc
}

// SetNillableLastModified sets the lastModified field if the given value is not nil.
func (fc *FileCreate) SetNillableLastModified(i *int64) *FileCreate {
	if i != nil {
		fc.SetLastModified(*i)
	}
	return fc
}

// SetContent sets the content field.
func (fc *FileCreate) SetContent(s string) *FileCreate {
	fc.content = &s
	return fc
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	if fc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := file.NameValidator(*fc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if fc.isDirectory == nil {
		v := file.DefaultIsDirectory
		fc.isDirectory = &v
	}
	if fc.size == nil {
		v := file.DefaultSize
		fc.size = &v
	}
	if fc.extension == nil {
		return nil, errors.New("ent: missing required field \"extension\"")
	}
	if err := file.ExtensionValidator(*fc.extension); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"extension\": %v", err)
	}
	if fc.mime == nil {
		return nil, errors.New("ent: missing required field \"mime\"")
	}
	if err := file.MimeValidator(*fc.mime); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"mime\": %v", err)
	}
	if fc.path == nil {
		return nil, errors.New("ent: missing required field \"path\"")
	}
	if err := file.PathValidator(*fc.path); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"path\": %v", err)
	}
	if fc.lastModified == nil {
		v := file.DefaultLastModified
		fc.lastModified = &v
	}
	if fc.content == nil {
		return nil, errors.New("ent: missing required field \"content\"")
	}
	if err := file.ContentValidator(*fc.content); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"content\": %v", err)
	}
	return fc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	var (
		f     = &File{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: file.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		}
	)
	if value := fc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldName,
		})
		f.Name = *value
	}
	if value := fc.isDirectory; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: file.FieldIsDirectory,
		})
		f.IsDirectory = *value
	}
	if value := fc.size; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: file.FieldSize,
		})
		f.Size = *value
	}
	if value := fc.extension; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldExtension,
		})
		f.Extension = *value
	}
	if value := fc.mime; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldMime,
		})
		f.Mime = *value
	}
	if value := fc.path; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldPath,
		})
		f.Path = *value
	}
	if value := fc.lastModified; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: file.FieldLastModified,
		})
		f.LastModified = *value
	}
	if value := fc.content; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldContent,
		})
		f.Content = *value
	}
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}
