// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"gofi/ent/configuration"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Configuration is the model entity for the Configuration schema.
type Configuration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version"`
	// AppPath holds the value of the "appPath" field.
	AppPath string `json:"appPath"`
	// DefStoragePath holds the value of the "defStoragePath" field.
	DefStoragePath string `json:"defaultStoragePath"`
	// ThemeStyle holds the value of the "themeStyle" field.
	ThemeStyle string `json:"themeStyle"`
	// ThemeColor holds the value of the "themeColor" field.
	ThemeColor string `json:"themeColor"`
	// NavMode holds the value of the "navMode" field.
	NavMode string `json:"navMode"`
	// DatabaseFilePath holds the value of the "databaseFilePath" field.
	DatabaseFilePath string `json:"databaseFilePath"`
	// CustomStoragePath holds the value of the "customStoragePath" field.
	CustomStoragePath string `json:"customStoragePath"`
	// LogDirectoryPath holds the value of the "logDirectoryPath" field.
	LogDirectoryPath string `json:"logDirectoryPath"`
	// Initialized holds the value of the "initialized" field.
	Initialized bool `json:"initialized"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created"`
	// Updated holds the value of the "updated" field.
	Updated time.Time `json:"updated"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configuration) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // version
		&sql.NullString{}, // appPath
		&sql.NullString{}, // defStoragePath
		&sql.NullString{}, // themeStyle
		&sql.NullString{}, // themeColor
		&sql.NullString{}, // navMode
		&sql.NullString{}, // databaseFilePath
		&sql.NullString{}, // customStoragePath
		&sql.NullString{}, // logDirectoryPath
		&sql.NullBool{},   // initialized
		&sql.NullTime{},   // created
		&sql.NullTime{},   // updated
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configuration fields.
func (c *Configuration) assignValues(values ...interface{}) error {
	if m, n := len(values), len(configuration.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[0])
	} else if value.Valid {
		c.Version = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field appPath", values[1])
	} else if value.Valid {
		c.AppPath = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field defStoragePath", values[2])
	} else if value.Valid {
		c.DefStoragePath = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field themeStyle", values[3])
	} else if value.Valid {
		c.ThemeStyle = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field themeColor", values[4])
	} else if value.Valid {
		c.ThemeColor = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field navMode", values[5])
	} else if value.Valid {
		c.NavMode = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field databaseFilePath", values[6])
	} else if value.Valid {
		c.DatabaseFilePath = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field customStoragePath", values[7])
	} else if value.Valid {
		c.CustomStoragePath = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field logDirectoryPath", values[8])
	} else if value.Valid {
		c.LogDirectoryPath = value.String
	}
	if value, ok := values[9].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field initialized", values[9])
	} else if value.Valid {
		c.Initialized = value.Bool
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created", values[10])
	} else if value.Valid {
		c.Created = value.Time
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated", values[11])
	} else if value.Valid {
		c.Updated = value.Time
	}
	return nil
}

// Update returns a builder for updating this Configuration.
// Note that, you need to call Configuration.Unwrap() before calling this method, if this Configuration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configuration) Update() *ConfigurationUpdateOne {
	return (&ConfigurationClient{c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Configuration) Unwrap() *Configuration {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configuration is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configuration) String() string {
	var builder strings.Builder
	builder.WriteString("Configuration(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", version=")
	builder.WriteString(c.Version)
	builder.WriteString(", appPath=")
	builder.WriteString(c.AppPath)
	builder.WriteString(", defStoragePath=")
	builder.WriteString(c.DefStoragePath)
	builder.WriteString(", themeStyle=")
	builder.WriteString(c.ThemeStyle)
	builder.WriteString(", themeColor=")
	builder.WriteString(c.ThemeColor)
	builder.WriteString(", navMode=")
	builder.WriteString(c.NavMode)
	builder.WriteString(", databaseFilePath=")
	builder.WriteString(c.DatabaseFilePath)
	builder.WriteString(", customStoragePath=")
	builder.WriteString(c.CustomStoragePath)
	builder.WriteString(", logDirectoryPath=")
	builder.WriteString(c.LogDirectoryPath)
	builder.WriteString(", initialized=")
	builder.WriteString(fmt.Sprintf("%v", c.Initialized))
	builder.WriteString(", created=")
	builder.WriteString(c.Created.Format(time.ANSIC))
	builder.WriteString(", updated=")
	builder.WriteString(c.Updated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Configurations is a parsable slice of Configuration.
type Configurations []*Configuration

func (c Configurations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
