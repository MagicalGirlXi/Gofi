// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gofi/ent/configuration"
	"gofi/ent/predicate"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ConfigurationUpdate is the builder for updating Configuration entities.
type ConfigurationUpdate struct {
	config

	clearversion bool

	clearappPath bool

	cleardefStoragePath bool
	themeStyle          *string
	themeColor          *string
	navMode             *string
	databaseFilePath    *string
	customStoragePath   *string
	logDirectoryPath    *string
	initialized         *bool

	updated    *time.Time
	predicates []predicate.Configuration
}

// Where adds a new predicate for the builder.
func (cu *ConfigurationUpdate) Where(ps ...predicate.Configuration) *ConfigurationUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetThemeStyle sets the themeStyle field.
func (cu *ConfigurationUpdate) SetThemeStyle(s string) *ConfigurationUpdate {
	cu.themeStyle = &s
	return cu
}

// SetThemeColor sets the themeColor field.
func (cu *ConfigurationUpdate) SetThemeColor(s string) *ConfigurationUpdate {
	cu.themeColor = &s
	return cu
}

// SetNavMode sets the navMode field.
func (cu *ConfigurationUpdate) SetNavMode(s string) *ConfigurationUpdate {
	cu.navMode = &s
	return cu
}

// SetDatabaseFilePath sets the databaseFilePath field.
func (cu *ConfigurationUpdate) SetDatabaseFilePath(s string) *ConfigurationUpdate {
	cu.databaseFilePath = &s
	return cu
}

// SetCustomStoragePath sets the customStoragePath field.
func (cu *ConfigurationUpdate) SetCustomStoragePath(s string) *ConfigurationUpdate {
	cu.customStoragePath = &s
	return cu
}

// SetNillableCustomStoragePath sets the customStoragePath field if the given value is not nil.
func (cu *ConfigurationUpdate) SetNillableCustomStoragePath(s *string) *ConfigurationUpdate {
	if s != nil {
		cu.SetCustomStoragePath(*s)
	}
	return cu
}

// SetLogDirectoryPath sets the logDirectoryPath field.
func (cu *ConfigurationUpdate) SetLogDirectoryPath(s string) *ConfigurationUpdate {
	cu.logDirectoryPath = &s
	return cu
}

// SetInitialized sets the initialized field.
func (cu *ConfigurationUpdate) SetInitialized(b bool) *ConfigurationUpdate {
	cu.initialized = &b
	return cu
}

// SetNillableInitialized sets the initialized field if the given value is not nil.
func (cu *ConfigurationUpdate) SetNillableInitialized(b *bool) *ConfigurationUpdate {
	if b != nil {
		cu.SetInitialized(*b)
	}
	return cu
}

// SetUpdated sets the updated field.
func (cu *ConfigurationUpdate) SetUpdated(t time.Time) *ConfigurationUpdate {
	cu.updated = &t
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ConfigurationUpdate) Save(ctx context.Context) (int, error) {
	if cu.themeStyle != nil {
		if err := configuration.ThemeStyleValidator(*cu.themeStyle); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"themeStyle\": %v", err)
		}
	}
	if cu.themeColor != nil {
		if err := configuration.ThemeColorValidator(*cu.themeColor); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"themeColor\": %v", err)
		}
	}
	if cu.navMode != nil {
		if err := configuration.NavModeValidator(*cu.navMode); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"navMode\": %v", err)
		}
	}
	if cu.databaseFilePath != nil {
		if err := configuration.DatabaseFilePathValidator(*cu.databaseFilePath); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"databaseFilePath\": %v", err)
		}
	}
	if cu.logDirectoryPath != nil {
		if err := configuration.LogDirectoryPathValidator(*cu.logDirectoryPath); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"logDirectoryPath\": %v", err)
		}
	}
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfigurationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configuration.Table,
			Columns: configuration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configuration.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.clearversion {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldVersion,
		})
	}
	if cu.clearappPath {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldAppPath,
		})
	}
	if cu.cleardefStoragePath {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldDefStoragePath,
		})
	}
	if value := cu.themeStyle; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeStyle,
		})
	}
	if value := cu.themeColor; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeColor,
		})
	}
	if value := cu.navMode; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldNavMode,
		})
	}
	if value := cu.databaseFilePath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldDatabaseFilePath,
		})
	}
	if value := cu.customStoragePath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldCustomStoragePath,
		})
	}
	if value := cu.logDirectoryPath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldLogDirectoryPath,
		})
	}
	if value := cu.initialized; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: configuration.FieldInitialized,
		})
	}
	if value := cu.updated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: configuration.FieldUpdated,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ConfigurationUpdateOne is the builder for updating a single Configuration entity.
type ConfigurationUpdateOne struct {
	config
	id int

	clearversion bool

	clearappPath bool

	cleardefStoragePath bool
	themeStyle          *string
	themeColor          *string
	navMode             *string
	databaseFilePath    *string
	customStoragePath   *string
	logDirectoryPath    *string
	initialized         *bool

	updated *time.Time
}

// SetThemeStyle sets the themeStyle field.
func (cuo *ConfigurationUpdateOne) SetThemeStyle(s string) *ConfigurationUpdateOne {
	cuo.themeStyle = &s
	return cuo
}

// SetThemeColor sets the themeColor field.
func (cuo *ConfigurationUpdateOne) SetThemeColor(s string) *ConfigurationUpdateOne {
	cuo.themeColor = &s
	return cuo
}

// SetNavMode sets the navMode field.
func (cuo *ConfigurationUpdateOne) SetNavMode(s string) *ConfigurationUpdateOne {
	cuo.navMode = &s
	return cuo
}

// SetDatabaseFilePath sets the databaseFilePath field.
func (cuo *ConfigurationUpdateOne) SetDatabaseFilePath(s string) *ConfigurationUpdateOne {
	cuo.databaseFilePath = &s
	return cuo
}

// SetCustomStoragePath sets the customStoragePath field.
func (cuo *ConfigurationUpdateOne) SetCustomStoragePath(s string) *ConfigurationUpdateOne {
	cuo.customStoragePath = &s
	return cuo
}

// SetNillableCustomStoragePath sets the customStoragePath field if the given value is not nil.
func (cuo *ConfigurationUpdateOne) SetNillableCustomStoragePath(s *string) *ConfigurationUpdateOne {
	if s != nil {
		cuo.SetCustomStoragePath(*s)
	}
	return cuo
}

// SetLogDirectoryPath sets the logDirectoryPath field.
func (cuo *ConfigurationUpdateOne) SetLogDirectoryPath(s string) *ConfigurationUpdateOne {
	cuo.logDirectoryPath = &s
	return cuo
}

// SetInitialized sets the initialized field.
func (cuo *ConfigurationUpdateOne) SetInitialized(b bool) *ConfigurationUpdateOne {
	cuo.initialized = &b
	return cuo
}

// SetNillableInitialized sets the initialized field if the given value is not nil.
func (cuo *ConfigurationUpdateOne) SetNillableInitialized(b *bool) *ConfigurationUpdateOne {
	if b != nil {
		cuo.SetInitialized(*b)
	}
	return cuo
}

// SetUpdated sets the updated field.
func (cuo *ConfigurationUpdateOne) SetUpdated(t time.Time) *ConfigurationUpdateOne {
	cuo.updated = &t
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ConfigurationUpdateOne) Save(ctx context.Context) (*Configuration, error) {
	if cuo.themeStyle != nil {
		if err := configuration.ThemeStyleValidator(*cuo.themeStyle); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"themeStyle\": %v", err)
		}
	}
	if cuo.themeColor != nil {
		if err := configuration.ThemeColorValidator(*cuo.themeColor); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"themeColor\": %v", err)
		}
	}
	if cuo.navMode != nil {
		if err := configuration.NavModeValidator(*cuo.navMode); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"navMode\": %v", err)
		}
	}
	if cuo.databaseFilePath != nil {
		if err := configuration.DatabaseFilePathValidator(*cuo.databaseFilePath); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"databaseFilePath\": %v", err)
		}
	}
	if cuo.logDirectoryPath != nil {
		if err := configuration.LogDirectoryPathValidator(*cuo.logDirectoryPath); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"logDirectoryPath\": %v", err)
		}
	}
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfigurationUpdateOne) SaveX(ctx context.Context) *Configuration {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConfigurationUpdateOne) sqlSave(ctx context.Context) (c *Configuration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configuration.Table,
			Columns: configuration.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: configuration.FieldID,
			},
		},
	}
	if cuo.clearversion {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldVersion,
		})
	}
	if cuo.clearappPath {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldAppPath,
		})
	}
	if cuo.cleardefStoragePath {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: configuration.FieldDefStoragePath,
		})
	}
	if value := cuo.themeStyle; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeStyle,
		})
	}
	if value := cuo.themeColor; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeColor,
		})
	}
	if value := cuo.navMode; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldNavMode,
		})
	}
	if value := cuo.databaseFilePath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldDatabaseFilePath,
		})
	}
	if value := cuo.customStoragePath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldCustomStoragePath,
		})
	}
	if value := cuo.logDirectoryPath; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldLogDirectoryPath,
		})
	}
	if value := cuo.initialized; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: configuration.FieldInitialized,
		})
	}
	if value := cuo.updated; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: configuration.FieldUpdated,
		})
	}
	c = &Configuration{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
