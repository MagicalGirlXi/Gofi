// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gofi/ent/configuration"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ConfigurationCreate is the builder for creating a Configuration entity.
type ConfigurationCreate struct {
	config
	version           *string
	appPath           *string
	defStoragePath    *string
	themeStyle        *string
	themeColor        *string
	navMode           *string
	databaseFilePath  *string
	customStoragePath *string
	logDirectoryPath  *string
	initialized       *bool
	created           *time.Time
	updated           *time.Time
}

// SetVersion sets the version field.
func (cc *ConfigurationCreate) SetVersion(s string) *ConfigurationCreate {
	cc.version = &s
	return cc
}

// SetNillableVersion sets the version field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableVersion(s *string) *ConfigurationCreate {
	if s != nil {
		cc.SetVersion(*s)
	}
	return cc
}

// SetAppPath sets the appPath field.
func (cc *ConfigurationCreate) SetAppPath(s string) *ConfigurationCreate {
	cc.appPath = &s
	return cc
}

// SetNillableAppPath sets the appPath field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableAppPath(s *string) *ConfigurationCreate {
	if s != nil {
		cc.SetAppPath(*s)
	}
	return cc
}

// SetDefStoragePath sets the defStoragePath field.
func (cc *ConfigurationCreate) SetDefStoragePath(s string) *ConfigurationCreate {
	cc.defStoragePath = &s
	return cc
}

// SetNillableDefStoragePath sets the defStoragePath field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableDefStoragePath(s *string) *ConfigurationCreate {
	if s != nil {
		cc.SetDefStoragePath(*s)
	}
	return cc
}

// SetThemeStyle sets the themeStyle field.
func (cc *ConfigurationCreate) SetThemeStyle(s string) *ConfigurationCreate {
	cc.themeStyle = &s
	return cc
}

// SetThemeColor sets the themeColor field.
func (cc *ConfigurationCreate) SetThemeColor(s string) *ConfigurationCreate {
	cc.themeColor = &s
	return cc
}

// SetNavMode sets the navMode field.
func (cc *ConfigurationCreate) SetNavMode(s string) *ConfigurationCreate {
	cc.navMode = &s
	return cc
}

// SetDatabaseFilePath sets the databaseFilePath field.
func (cc *ConfigurationCreate) SetDatabaseFilePath(s string) *ConfigurationCreate {
	cc.databaseFilePath = &s
	return cc
}

// SetCustomStoragePath sets the customStoragePath field.
func (cc *ConfigurationCreate) SetCustomStoragePath(s string) *ConfigurationCreate {
	cc.customStoragePath = &s
	return cc
}

// SetNillableCustomStoragePath sets the customStoragePath field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableCustomStoragePath(s *string) *ConfigurationCreate {
	if s != nil {
		cc.SetCustomStoragePath(*s)
	}
	return cc
}

// SetLogDirectoryPath sets the logDirectoryPath field.
func (cc *ConfigurationCreate) SetLogDirectoryPath(s string) *ConfigurationCreate {
	cc.logDirectoryPath = &s
	return cc
}

// SetInitialized sets the initialized field.
func (cc *ConfigurationCreate) SetInitialized(b bool) *ConfigurationCreate {
	cc.initialized = &b
	return cc
}

// SetNillableInitialized sets the initialized field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableInitialized(b *bool) *ConfigurationCreate {
	if b != nil {
		cc.SetInitialized(*b)
	}
	return cc
}

// SetCreated sets the created field.
func (cc *ConfigurationCreate) SetCreated(t time.Time) *ConfigurationCreate {
	cc.created = &t
	return cc
}

// SetUpdated sets the updated field.
func (cc *ConfigurationCreate) SetUpdated(t time.Time) *ConfigurationCreate {
	cc.updated = &t
	return cc
}

// Save creates the Configuration in the database.
func (cc *ConfigurationCreate) Save(ctx context.Context) (*Configuration, error) {
	if cc.themeStyle == nil {
		return nil, errors.New("ent: missing required field \"themeStyle\"")
	}
	if err := configuration.ThemeStyleValidator(*cc.themeStyle); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"themeStyle\": %v", err)
	}
	if cc.themeColor == nil {
		return nil, errors.New("ent: missing required field \"themeColor\"")
	}
	if err := configuration.ThemeColorValidator(*cc.themeColor); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"themeColor\": %v", err)
	}
	if cc.navMode == nil {
		return nil, errors.New("ent: missing required field \"navMode\"")
	}
	if err := configuration.NavModeValidator(*cc.navMode); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"navMode\": %v", err)
	}
	if cc.databaseFilePath == nil {
		return nil, errors.New("ent: missing required field \"databaseFilePath\"")
	}
	if err := configuration.DatabaseFilePathValidator(*cc.databaseFilePath); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"databaseFilePath\": %v", err)
	}
	if cc.customStoragePath == nil {
		v := configuration.DefaultCustomStoragePath
		cc.customStoragePath = &v
	}
	if cc.logDirectoryPath == nil {
		return nil, errors.New("ent: missing required field \"logDirectoryPath\"")
	}
	if err := configuration.LogDirectoryPathValidator(*cc.logDirectoryPath); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"logDirectoryPath\": %v", err)
	}
	if cc.initialized == nil {
		v := configuration.DefaultInitialized
		cc.initialized = &v
	}
	if cc.created == nil {
		return nil, errors.New("ent: missing required field \"created\"")
	}
	if cc.updated == nil {
		return nil, errors.New("ent: missing required field \"updated\"")
	}
	return cc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigurationCreate) SaveX(ctx context.Context) *Configuration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ConfigurationCreate) sqlSave(ctx context.Context) (*Configuration, error) {
	var (
		c     = &Configuration{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: configuration.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: configuration.FieldID,
			},
		}
	)
	if value := cc.version; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldVersion,
		})
		c.Version = *value
	}
	if value := cc.appPath; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldAppPath,
		})
		c.AppPath = *value
	}
	if value := cc.defStoragePath; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldDefStoragePath,
		})
		c.DefStoragePath = *value
	}
	if value := cc.themeStyle; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeStyle,
		})
		c.ThemeStyle = *value
	}
	if value := cc.themeColor; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldThemeColor,
		})
		c.ThemeColor = *value
	}
	if value := cc.navMode; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldNavMode,
		})
		c.NavMode = *value
	}
	if value := cc.databaseFilePath; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldDatabaseFilePath,
		})
		c.DatabaseFilePath = *value
	}
	if value := cc.customStoragePath; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldCustomStoragePath,
		})
		c.CustomStoragePath = *value
	}
	if value := cc.logDirectoryPath; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: configuration.FieldLogDirectoryPath,
		})
		c.LogDirectoryPath = *value
	}
	if value := cc.initialized; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: configuration.FieldInitialized,
		})
		c.Initialized = *value
	}
	if value := cc.created; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: configuration.FieldCreated,
		})
		c.Created = *value
	}
	if value := cc.updated; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: configuration.FieldUpdated,
		})
		c.Updated = *value
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
